

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Feb 19 20:17:32 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F84A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	swtext1,local,class=CONST,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	dabs	1,0x4E,2
    13  0000                     
    14                           ; Version 1.40
    15                           ; Generated 01/12/2016 GMT
    16                           ; 
    17                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F84A Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0008                     	;# 
    56  0009                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  0081                     	;# 
    60  0085                     	;# 
    61  0086                     	;# 
    62  0088                     	;# 
    63  0089                     	;# 
    64  0005                     _PORTA	set	5
    65  0006                     _PORTB	set	6
    66  0028                     _RA0	set	40
    67  0085                     _TRISA	set	133
    68  0086                     _TRISB	set	134
    69                           
    70                           	psect	cinit
    71  03FE                     start_initialization:	
    72                           ; #config settings
    73                           
    74  03FE                     __initialization:	
    75  03FE                     end_of_initialization:	
    76                           ;End of C runtime variable initialization code
    77                           
    78  03FE                     __end_of__initialization:	
    79  03FE  0183               	clrf	3
    80  03FF  2B56               	ljmp	_main	;jump to C main() function
    81                           
    82                           	psect	cstackCOMMON
    83  0000                     __pcstackCOMMON:	
    84  0000                     ??_show:	
    85  0000                     ??_attente:	
    86                           ; 1 bytes @ 0x0
    87                           
    88  0000                     ??_main:	
    89                           ; 1 bytes @ 0x0
    90                           
    91                           
    92                           	psect	cstackBANK0
    93  000C                     __pcstackBANK0:	
    94                           ; 1 bytes @ 0x0
    95                           
    96  000C                     ?_attente:	
    97  000C                     ?_main:	
    98                           ; 1 bytes @ 0x0
    99                           
   100  000C                     ?___awmod:	
   101                           ; 1 bytes @ 0x0
   102                           
   103  000C                     attente@i:	
   104                           ; 2 bytes @ 0x0
   105                           
   106  000C                     ___awmod@divisor:	
   107                           ; 2 bytes @ 0x0
   108                           
   109                           
   110                           ; 2 bytes @ 0x0
   111  000C                     	ds	2
   112  000E                     attente@j:	
   113  000E                     ___awmod@dividend:	
   114                           ; 2 bytes @ 0x2
   115                           
   116                           
   117                           ; 2 bytes @ 0x2
   118  000E                     	ds	2
   119  0010                     ?_show:	
   120  0010                     ??___awmod:	
   121                           ; 1 bytes @ 0x4
   122                           
   123  0010                     show@i:	
   124                           ; 1 bytes @ 0x4
   125                           
   126                           
   127                           ; 2 bytes @ 0x4
   128  0010                     	ds	1
   129  0011                     ___awmod@counter:	
   130                           
   131                           ; 1 bytes @ 0x5
   132  0011                     	ds	1
   133  0012                     ___awmod@sign:	
   134                           
   135                           ; 1 bytes @ 0x6
   136  0012                     	ds	1
   137  0013                     main@i:	
   138                           
   139                           ; 2 bytes @ 0x7
   140  0013                     	ds	2
   141                           
   142                           	psect	maintext
   143  0356                     __pmaintext:	
   144 ;;
   145 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   146 ;;
   147 ;; *************** function _main *****************
   148 ;; Defined at:
   149 ;;		line 14 in file "main.c"
   150 ;; Parameters:    Size  Location     Type
   151 ;;		None
   152 ;; Auto vars:     Size  Location     Type
   153 ;;  i               2    7[BANK0 ] int 
   154 ;; Return value:  Size  Location     Type
   155 ;;                  1    wreg      void 
   156 ;; Registers used:
   157 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   158 ;; Tracked objects:
   159 ;;		On entry : B00/0
   160 ;;		On exit  : 0/0
   161 ;;		Unchanged: 0/0
   162 ;; Data sizes:     COMMON   BANK0
   163 ;;      Params:         0       0
   164 ;;      Locals:         0       2
   165 ;;      Temps:          0       0
   166 ;;      Totals:         0       2
   167 ;;Total ram usage:        2 bytes
   168 ;; Hardware stack levels required when called:    2
   169 ;; This function calls:
   170 ;;		___awmod
   171 ;;		_show
   172 ;; This function is called by:
   173 ;;		Startup code after reset
   174 ;; This function uses a non-reentrant model
   175 ;;
   176                           
   177                           
   178                           ;psect for function _main
   179  0356                     _main:	
   180                           
   181                           ;main.c: 16: TRISA = 0xFF;
   182                           
   183                           ;incstack = 0
   184                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   185  0356  30FF               	movlw	255
   186  0357  1683               	bsf	3,5	;RP0=1, select bank1
   187  0358  0085               	movwf	5	;volatile
   188                           
   189                           ;main.c: 17: TRISB = 0x00;
   190  0359  0186               	clrf	6	;volatile
   191                           
   192                           ;main.c: 19: PORTA = 0x00;
   193  035A  1283               	bcf	3,5	;RP0=0, select bank0
   194  035B  0185               	clrf	5	;volatile
   195                           
   196                           ;main.c: 20: PORTB = 0x00;
   197  035C  0186               	clrf	6	;volatile
   198                           
   199                           ;main.c: 22: int i = 0;
   200  035D  0193               	clrf	main@i
   201  035E  0194               	clrf	main@i+1
   202  035F                     l752:	
   203                           ;main.c: 26: while ( RA0 ) {
   204                           
   205                           ;main.c: 24: while ( 1 ) {
   206                           
   207  035F  1283               	bcf	3,5	;RP0=0, select bank0
   208  0360  1C05               	btfss	5,0	;volatile
   209  0361  2B5F               	goto	l752
   210                           
   211                           ;main.c: 28: i = i++%6;
   212  0362  3006               	movlw	6
   213  0363  008C               	movwf	___awmod@divisor
   214  0364  3000               	movlw	0
   215  0365  008D               	movwf	___awmod@divisor+1
   216  0366  0814               	movf	main@i+1,w
   217  0367  008F               	movwf	___awmod@dividend+1
   218  0368  0813               	movf	main@i,w
   219  0369  008E               	movwf	___awmod@dividend
   220  036A  23B2               	fcall	___awmod
   221  036B  1283               	bcf	3,5	;RP0=0, select bank0
   222  036C  080D               	movf	?___awmod+1,w
   223  036D  0094               	movwf	main@i+1
   224  036E  080C               	movf	?___awmod,w
   225  036F  0093               	movwf	main@i
   226  0370  3001               	movlw	1
   227  0371  0793               	addwf	main@i,f
   228  0372  1803               	skipnc
   229  0373  0A94               	incf	main@i+1,f
   230  0374  3000               	movlw	0
   231  0375  0794               	addwf	main@i+1,f
   232                           
   233                           ;main.c: 29: show( i );
   234  0376  0814               	movf	main@i+1,w
   235  0377  0091               	movwf	show@i+1
   236  0378  0813               	movf	main@i,w
   237  0379  0090               	movwf	show@i
   238  037A  2332               	fcall	_show
   239  037B  2B5F               	goto	l752
   240  037C                     __end_of_main:	
   241                           
   242                           	psect	text1
   243  0332                     __ptext1:	
   244 ;; *************** function _show *****************
   245 ;; Defined at:
   246 ;;		line 34 in file "main.c"
   247 ;; Parameters:    Size  Location     Type
   248 ;;  i               2    4[BANK0 ] int 
   249 ;; Auto vars:     Size  Location     Type
   250 ;;		None
   251 ;; Return value:  Size  Location     Type
   252 ;;                  1    wreg      void 
   253 ;; Registers used:
   254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   255 ;; Tracked objects:
   256 ;;		On entry : 0/0
   257 ;;		On exit  : 0/0
   258 ;;		Unchanged: 0/0
   259 ;; Data sizes:     COMMON   BANK0
   260 ;;      Params:         0       2
   261 ;;      Locals:         0       0
   262 ;;      Temps:          0       0
   263 ;;      Totals:         0       2
   264 ;;Total ram usage:        2 bytes
   265 ;; Hardware stack levels used:    1
   266 ;; Hardware stack levels required when called:    1
   267 ;; This function calls:
   268 ;;		_attente
   269 ;; This function is called by:
   270 ;;		_main
   271 ;; This function uses a non-reentrant model
   272 ;;
   273                           
   274                           
   275                           ;psect for function _show
   276  0332                     _show:	
   277                           
   278                           ;main.c: 36: switch ( i ) {
   279                           
   280                           ;incstack = 0
   281                           ; Regs used in _show: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   282  0332  2B43               	goto	l686
   283  0333                     l670:	
   284                           ;main.c: 37: case 0:
   285                           
   286                           
   287                           ;main.c: 38: PORTB = 0x00;
   288  0333  1283               	bcf	3,5	;RP0=0, select bank0
   289  0334  0186               	clrf	6	;volatile
   290                           
   291                           ;main.c: 39: break;
   292  0335  2B54               	goto	l688
   293  0336                     l672:	
   294                           ;main.c: 40: case 1:
   295                           
   296                           
   297                           ;main.c: 41: PORTB = 0x06;
   298  0336  3006               	movlw	6
   299  0337  2B41               	goto	L5
   300  0338                     l674:	
   301                           ;main.c: 43: case 2:
   302                           
   303                           ;main.c: 42: break;
   304                           
   305                           
   306                           ;main.c: 44: PORTB = 0x5B;
   307  0338  305B               	movlw	91
   308  0339  2B41               	goto	L5
   309  033A                     l676:	
   310                           ;main.c: 46: case 3:
   311                           
   312                           ;main.c: 45: break;
   313                           
   314                           
   315                           ;main.c: 47: PORTB = 0x4F;
   316  033A  304F               	movlw	79
   317  033B  2B41               	goto	L5
   318  033C                     l678:	
   319                           ;main.c: 49: case 4:
   320                           
   321                           ;main.c: 48: break;
   322                           
   323                           
   324                           ;main.c: 50: PORTB = 0x66;
   325  033C  3066               	movlw	102
   326  033D  2B41               	goto	L5
   327  033E                     l680:	
   328                           ;main.c: 52: case 5:
   329                           
   330                           ;main.c: 51: break;
   331                           
   332                           
   333                           ;main.c: 53: PORTB = 0x6D;
   334  033E  306D               	movlw	109
   335  033F  2B41               	goto	L5
   336  0340                     l682:	
   337                           ;main.c: 55: case 6:
   338                           
   339                           ;main.c: 54: break;
   340                           
   341                           
   342                           ;main.c: 56: PORTB = 0x7D;
   343  0340  307D               	movlw	125
   344  0341                     L5:	
   345  0341  0086               	movwf	6	;volatile
   346                           
   347                           ;main.c: 58: }
   348                           
   349                           ;main.c: 57: break;
   350  0342  2B54               	goto	l688
   351  0343                     l686:	
   352                           
   353                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   354                           ; Switch size 1, requested type "space"
   355                           ; Number of cases is 1, Range of values is 0 to 0
   356                           ; switch strategies available:
   357                           ; Name         Instructions Cycles
   358                           ; simple_byte            4     3 (average)
   359                           ; direct_byte            7     6 (fixed)
   360                           ; jumptable            260     6 (fixed)
   361                           ;	Chosen strategy is simple_byte
   362  0343  1283               	bcf	3,5	;RP0=0, select bank0
   363  0344  0811               	movf	show@i+1,w
   364  0345  3A00               	xorlw	0	; case 0
   365  0346  1903               	skipnz
   366  0347  2B49               	goto	l794
   367  0348  2B54               	goto	l688
   368  0349                     l794:	
   369                           
   370                           ; Switch size 1, requested type "space"
   371                           ; Number of cases is 7, Range of values is 0 to 6
   372                           ; switch strategies available:
   373                           ; Name         Instructions Cycles
   374                           ; direct_byte           13     6 (fixed)
   375                           ; simple_byte           22    12 (average)
   376                           ; jumptable            260     6 (fixed)
   377                           ;	Chosen strategy is direct_byte
   378  0349  0810               	movf	show@i,w
   379  034A  0084               	movwf	4
   380  034B  3007               	movlw	7
   381  034C  0204               	subwf	4,w
   382  034D  1803               	skipnc
   383  034E  2B54               	goto	l688
   384  034F  3000               	movlw	high S796
   385  0350  008A               	movwf	10
   386  0351  3001               	movlw	low S796
   387  0352  0704               	addwf	4,w
   388  0353  0082               	movwf	2
   389  0354                     l688:	
   390                           
   391                           ;main.c: 59: attente();
   392  0354  237C               	fcall	_attente
   393  0355  0008               	return
   394  0356                     __end_of_show:	
   395                           
   396                           	psect	swtext1
   397  0001                     __pswtext1:	
   398  0001                     S796:	
   399  0001  2B33               	ljmp	l670
   400  0002  2B36               	ljmp	l672
   401  0003  2B38               	ljmp	l674
   402  0004  2B3A               	ljmp	l676
   403  0005  2B3C               	ljmp	l678
   404  0006  2B3E               	ljmp	l680
   405  0007  2B40               	ljmp	l682
   406                           
   407                           	psect	text2
   408  037C                     __ptext2:	
   409 ;; *************** function _attente *****************
   410 ;; Defined at:
   411 ;;		line 62 in file "main.c"
   412 ;; Parameters:    Size  Location     Type
   413 ;;		None
   414 ;; Auto vars:     Size  Location     Type
   415 ;;  j               2    2[BANK0 ] int 
   416 ;;  i               2    0[BANK0 ] int 
   417 ;; Return value:  Size  Location     Type
   418 ;;                  1    wreg      void 
   419 ;; Registers used:
   420 ;;		wreg, status,2, btemp+1
   421 ;; Tracked objects:
   422 ;;		On entry : 0/0
   423 ;;		On exit  : 0/0
   424 ;;		Unchanged: 0/0
   425 ;; Data sizes:     COMMON   BANK0
   426 ;;      Params:         0       0
   427 ;;      Locals:         0       4
   428 ;;      Temps:          0       0
   429 ;;      Totals:         0       4
   430 ;;Total ram usage:        4 bytes
   431 ;; Hardware stack levels used:    1
   432 ;; This function calls:
   433 ;;		Nothing
   434 ;; This function is called by:
   435 ;;		_show
   436 ;; This function uses a non-reentrant model
   437 ;;
   438                           
   439                           
   440                           ;psect for function _attente
   441  037C                     _attente:	
   442                           
   443                           ;main.c: 64: for ( int i = 0; i < 32; i++ ) {
   444                           
   445                           ;incstack = 0
   446                           ; Regs used in _attente: [wreg+status,2+btemp+1]
   447  037C  1283               	bcf	3,5	;RP0=0, select bank0
   448  037D  018C               	clrf	attente@i
   449  037E  018D               	clrf	attente@i+1
   450  037F                     L6:	
   451  037F  080D               	movf	attente@i+1,w
   452  0380  3A80               	xorlw	128
   453  0381  00CF               	movwf	79
   454  0382  3080               	movlw	128
   455  0383  024F               	subwf	79,w
   456  0384  1D03               	skipz
   457  0385  2B88               	goto	u155
   458  0386  3020               	movlw	32
   459  0387  020C               	subwf	attente@i,w
   460  0388                     u155:	
   461  0388  1803               	btfsc	3,0
   462  0389  0008               	return
   463                           
   464                           ;main.c: 65: for ( int j = 0; j < 32; j++ );
   465  038A  1283               	bcf	3,5	;RP0=0, select bank0
   466  038B  018E               	clrf	attente@j
   467  038C  018F               	clrf	attente@j+1
   468  038D  080F               	movf	attente@j+1,w
   469  038E  3A80               	xorlw	128
   470  038F  00CF               	movwf	79
   471  0390  3080               	movlw	128
   472  0391  024F               	subwf	79,w
   473  0392  1D03               	skipz
   474  0393  2B96               	goto	u165
   475  0394  3020               	movlw	32
   476  0395  020E               	subwf	attente@j,w
   477  0396                     u165:	
   478  0396  1803               	btfsc	3,0
   479  0397  2BAA               	goto	l664
   480  0398                     l660:	
   481  0398  3001               	movlw	1
   482  0399  1283               	bcf	3,5	;RP0=0, select bank0
   483  039A  078E               	addwf	attente@j,f
   484  039B  1803               	skipnc
   485  039C  0A8F               	incf	attente@j+1,f
   486  039D  3000               	movlw	0
   487  039E  078F               	addwf	attente@j+1,f
   488  039F  080F               	movf	attente@j+1,w
   489  03A0  3A80               	xorlw	128
   490  03A1  00CF               	movwf	79
   491  03A2  3080               	movlw	128
   492  03A3  024F               	subwf	79,w
   493  03A4  1D03               	skipz
   494  03A5  2BA8               	goto	u175
   495  03A6  3020               	movlw	32
   496  03A7  020E               	subwf	attente@j,w
   497  03A8                     u175:	
   498  03A8  1C03               	skipc
   499  03A9  2B98               	goto	l660
   500  03AA                     l664:	
   501  03AA  3001               	movlw	1
   502  03AB  1283               	bcf	3,5	;RP0=0, select bank0
   503  03AC  078C               	addwf	attente@i,f
   504  03AD  1803               	skipnc
   505  03AE  0A8D               	incf	attente@i+1,f
   506  03AF  3000               	movlw	0
   507  03B0  078D               	addwf	attente@i+1,f
   508  03B1  2B7F               	goto	L6
   509  03B2                     __end_of_attente:	
   510                           
   511                           	psect	text3
   512  03B2                     __ptext3:	
   513 ;; *************** function ___awmod *****************
   514 ;; Defined at:
   515 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.40\sources\common\awmod.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;  divisor         2    0[BANK0 ] int 
   518 ;;  dividend        2    2[BANK0 ] int 
   519 ;; Auto vars:     Size  Location     Type
   520 ;;  sign            1    6[BANK0 ] unsigned char 
   521 ;;  counter         1    5[BANK0 ] unsigned char 
   522 ;; Return value:  Size  Location     Type
   523 ;;                  2    0[BANK0 ] int 
   524 ;; Registers used:
   525 ;;		wreg, status,2, status,0
   526 ;; Tracked objects:
   527 ;;		On entry : 0/0
   528 ;;		On exit  : 0/0
   529 ;;		Unchanged: 0/0
   530 ;; Data sizes:     COMMON   BANK0
   531 ;;      Params:         0       4
   532 ;;      Locals:         0       2
   533 ;;      Temps:          0       1
   534 ;;      Totals:         0       7
   535 ;;Total ram usage:        7 bytes
   536 ;; Hardware stack levels used:    1
   537 ;; This function calls:
   538 ;;		Nothing
   539 ;; This function is called by:
   540 ;;		_main
   541 ;; This function uses a non-reentrant model
   542 ;;
   543                           
   544                           
   545                           ;psect for function ___awmod
   546  03B2                     ___awmod:	
   547                           
   548                           ;incstack = 0
   549                           ; Regs used in ___awmod: [wreg+status,2+status,0]
   550  03B2  1283               	bcf	3,5	;RP0=0, select bank0
   551  03B3  0192               	clrf	___awmod@sign
   552  03B4  1F8F               	btfss	___awmod@dividend+1,7
   553  03B5  2BBD               	goto	l706
   554  03B6  098E               	comf	___awmod@dividend,f
   555  03B7  098F               	comf	___awmod@dividend+1,f
   556  03B8  0A8E               	incf	___awmod@dividend,f
   557  03B9  1903               	skipnz
   558  03BA  0A8F               	incf	___awmod@dividend+1,f
   559  03BB  0192               	clrf	___awmod@sign
   560  03BC  0A92               	incf	___awmod@sign,f
   561  03BD                     l706:	
   562  03BD  1F8D               	btfss	___awmod@divisor+1,7
   563  03BE  2BC4               	goto	l710
   564  03BF  098C               	comf	___awmod@divisor,f
   565  03C0  098D               	comf	___awmod@divisor+1,f
   566  03C1  0A8C               	incf	___awmod@divisor,f
   567  03C2  1903               	skipnz
   568  03C3  0A8D               	incf	___awmod@divisor+1,f
   569  03C4                     l710:	
   570  03C4  080C               	movf	___awmod@divisor,w
   571  03C5  040D               	iorwf	___awmod@divisor+1,w
   572  03C6  1903               	btfsc	3,2
   573  03C7  2BF1               	goto	l728
   574  03C8  0191               	clrf	___awmod@counter
   575  03C9  0A91               	incf	___awmod@counter,f
   576  03CA                     l718:	
   577  03CA  1B8D               	btfsc	___awmod@divisor+1,7
   578  03CB  2BD8               	goto	l720
   579  03CC  3001               	movlw	1
   580  03CD                     u225:	
   581  03CD  1003               	clrc
   582  03CE  0D8C               	rlf	___awmod@divisor,f
   583  03CF  0D8D               	rlf	___awmod@divisor+1,f
   584  03D0  3EFF               	addlw	-1
   585  03D1  1D03               	skipz
   586  03D2  2BCD               	goto	u225
   587  03D3  3001               	movlw	1
   588  03D4  0090               	movwf	??___awmod
   589  03D5  0810               	movf	??___awmod,w
   590  03D6  0791               	addwf	___awmod@counter,f
   591  03D7  2BCA               	goto	l718
   592  03D8                     l720:	
   593  03D8  080D               	movf	___awmod@divisor+1,w
   594  03D9  020F               	subwf	___awmod@dividend+1,w
   595  03DA  1D03               	skipz
   596  03DB  2BDE               	goto	u245
   597  03DC  080C               	movf	___awmod@divisor,w
   598  03DD  020E               	subwf	___awmod@dividend,w
   599  03DE                     u245:	
   600  03DE  1C03               	skipc
   601  03DF  2BE6               	goto	l724
   602  03E0  080C               	movf	___awmod@divisor,w
   603  03E1  028E               	subwf	___awmod@dividend,f
   604  03E2  080D               	movf	___awmod@divisor+1,w
   605  03E3  1C03               	skipc
   606  03E4  038F               	decf	___awmod@dividend+1,f
   607  03E5  028F               	subwf	___awmod@dividend+1,f
   608  03E6                     l724:	
   609  03E6  3001               	movlw	1
   610  03E7                     u255:	
   611  03E7  1003               	clrc
   612  03E8  0C8D               	rrf	___awmod@divisor+1,f
   613  03E9  0C8C               	rrf	___awmod@divisor,f
   614  03EA  3EFF               	addlw	-1
   615  03EB  1D03               	skipz
   616  03EC  2BE7               	goto	u255
   617  03ED  3001               	movlw	1
   618  03EE  0291               	subwf	___awmod@counter,f
   619  03EF  1D03               	btfss	3,2
   620  03F0  2BD8               	goto	l720
   621  03F1                     l728:	
   622  03F1  0812               	movf	___awmod@sign,w
   623  03F2  1903               	btfsc	3,2
   624  03F3  2BF9               	goto	l732
   625  03F4  098E               	comf	___awmod@dividend,f
   626  03F5  098F               	comf	___awmod@dividend+1,f
   627  03F6  0A8E               	incf	___awmod@dividend,f
   628  03F7  1903               	skipnz
   629  03F8  0A8F               	incf	___awmod@dividend+1,f
   630  03F9                     l732:	
   631  03F9  080F               	movf	___awmod@dividend+1,w
   632  03FA  008D               	movwf	?___awmod+1
   633  03FB  080E               	movf	___awmod@dividend,w
   634  03FC  008C               	movwf	?___awmod
   635  03FD  0008               	return
   636  03FE                     __end_of___awmod:	
   637  004E                     btemp	set	78	;btemp
   638  004E                     wtemp0	set	78


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66      9       9

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___awmod
    _show->_attente

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     616
                                              7 BANK0      2     2      0
                            ___awmod
                               _show
 ---------------------------------------------------------------------------------
 (1) _show                                                 2     0      2     167
                                              4 BANK0      2     0      2
                            _attente
 ---------------------------------------------------------------------------------
 (2) _attente                                              4     4      0      92
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     402
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   _show
     _attente

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42      9       9       3       13.6%
ABS                  0      0       0       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Feb 19 20:17:32 2017

                      pc 0002                       fsr 0004                      S796 0001  
                    l710 03C4                      l720 03D8                      l706 03BD  
                    l732 03F9                      l724 03E6                      l660 0398  
                    l718 03CA                      l670 0333                      l728 03F1  
                    l664 03AA                      l680 033E                      l672 0336  
                    l752 035F                      l682 0340                      l674 0338  
                    l676 033A                      l678 033C                      l686 0343  
                    l688 0354                      l794 0349                      _RA0 0028  
                    u225 03CD                      u155 0388                      u245 03DE  
                    u165 0396                      u255 03E7                      u175 03A8  
           ___awmod@sign 0012                     _main 0356                     _show 0332  
                   btemp 004E                     start 0000                    ?_main 000C  
        __end_of___awmod 03FE                    ?_show 0010                    _PORTA 0005  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
        __end_of_attente 03B2                    main@i 0013                    pclath 000A  
                  show@i 0010                    status 0003                    wtemp0 004E  
        __initialization 03FE             __end_of_main 037C             __end_of_show 0356  
                 ??_main 0000                   ??_show 0000                ??___awmod 0010  
        ___awmod@divisor 000C          ___awmod@counter 0011                ??_attente 0000  
__end_of__initialization 03FE           __pcstackCOMMON 0000               __pmaintext 0356  
                ___awmod 03B2                  __ptext1 0332                  __ptext2 037C  
                __ptext3 03B2                  _attente 037C         ___awmod@dividend 000E  
   end_of_initialization 03FE      start_initialization 03FE                ___latbits 0000  
          __pcstackBANK0 000C                 ?___awmod 000C                __pswtext1 0001  
               ?_attente 000C         __size_of___awmod 004C         __size_of_attente 0036  
          __size_of_main 0026            __size_of_show 0024                 attente@i 000C  
               attente@j 000E  
